apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization
namespace: dev-kakeibo
### Separated secret to use argocd ###
#secretGenerator:
#- name: docker-registry
#  files:
#   - '.dockerconfigjson=docker-registry.json'
#  type: kubernetes.io/dockerconfigjson
#- name: kustomize-password
#  files:
#  - password=password.txt
bases:
- ../../base
transformers:
- transformer-labels.yaml
- transformer-suffixprefix.yaml
resources:
- configmap-django-variable01.yaml
images:
- name: frontend-app01
  newName: abeyuki/django
  newTag: "4.0.3"
- name: backend-db01
  newName: postgres
  newTag: "13.5-bullseye"
replicas:
- name: frontend-app01
  count: 1
- name: backend-db01
  count: 1
patchesStrategicMerge:
- |-
  apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: frontend-app01
  spec:
    accessModes:
      - ReadWriteMany
    resources:
      requests:
        storage: 1Gi
    storageClassName: standard
    volumeMode: Filesystem
- |-
  apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: backend-db01
  spec:
    accessModes:
      - ReadWriteMany
    resources:
      requests:
        storage: 1Gi
    storageClassName: standard
    volumeMode: Filesystem
- |-
  apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: frontend-app01
  spec:
    template:
      spec:
        containers:
        - name: frontend-app01
          command: ["/bin/bash", "-c"]
          args:
          - |
            function Clone (){
              git clone https://github.com/AbeYuki/kakeibo.git /codetmp && cp -a /codetmp/* /code/
            }
            function create_secret_key (){
            Secret_Key=$(python3 -c "
            from django.core.management.utils import get_random_secret_key
            print(get_random_secret_key())")
            }
            function setting_local_secret (){
            cat <<__EOF__> /code/project/settings_local.py
            SECRET_KEY = '$Secret_Key'
            __EOF__
            }
            function settigs_local_database (){
            export POSTGRES_HOST=$(env | egrep -i backend_db.*service.*host | awk -F '=' '{print $1}' | tr 'A-Z' 'a-z'  | tr '_' '-' | sed  's/-service-host//')
            cat <<__EOF__>> /code/project/settings_local.py
            DATABASES = {
                'default': {
                    'ENGINE': 'django.db.backends.postgresql',
                    'NAME': '${POSTGRES_NAME}',
                    'USER': '${POSTGRES_USER}',
                    'PASSWORD': '${POSTGRES_PASSWORD}',
                    'HOST': '${POSTGRES_HOST}',
                    'PORT': 5432,
                }
            }
            __EOF__
            }
            function connection_check (){
                while true; do
                    if [ $(curl -m 1 $(env | grep BACKEND | grep SERVICE_HOST | awk -F '=' '{print $2}'):5432 > /dev/null 2>&1 ;echo $?) -eq '52' ]; then
                        echo 'connection ok'
                        break
                    else
                        echo 'not connection' ;sleep 5
                    fi
                done 
            }
            function module_fix (){
              sed -i -e 's/force_text/force_str/' /usr/local/lib/$(python --version | cut -d '.' -f 1,2 | tr 'A-Z' 'a-z' | tr -d ' ')/site-packages/django_pandas/utils.py
            }
            function Runserver (){
              python manage.py makemigrations \
              && python manage.py migrate \
              && python manage.py runserver 0.0.0.0:8000
            }
            if [ ! -f /code/manage.py ]; then 
                Clone \
                && create_secret_key \
                && setting_local_secret \
                && settigs_local_database \
                && connection_check \
                && module_fix \
                && Runserver
            else
                connection_check \
                && module_fix \
                && Runserver
            fi